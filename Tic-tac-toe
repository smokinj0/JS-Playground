public class TicTacToe {
    // Define the game board as a 3x3 array of characters
    private char[][] board;

    // Constructor to initialize the game board
    public TicTacToe() {
        board = new char[3][3];
        // Initialize the board with empty spaces
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
    }

    // Method to print the current state of the game board
    public void printBoard() {
        System.out.println("-------------");
        for (int i = 0; i < 3; i++) {
            System.out.print("| ");
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    // Method to check if the current move is valid
    public boolean isValidMove(int row, int col) {
        // Check if the specified cell is within the bounds of the board
        if (row < 0 || row >= 3 || col < 0 || col >= 3) {
            return false;
        }
        // Check if the specified cell is empty
        return board[row][col] == ' ';
    }

    // Method to make a move on the board
    public void makeMove(int row, int col, char player) {
        board[row][col] = player;
    }

    // Method to check if the game is over
    public boolean isGameOver() {
        // Check rows, columns, and diagonals for a winning combination
        for (int i = 0; i < 3; i++) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return true;
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                return true;
            }
        }
        if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return true;
        }
        if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return true;
        }
        // Check if the board is full (tie)
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    // Method to get the winner of the game
    public char getWinner() {
        // Check rows, columns, and diagonals for a winning combination
        for (int i = 0; i < 3; i++) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return board[i][0];
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                return board[0][i];
            }
        }
        if (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            return board[0][0];
        }
        if (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            return board[0][2];
        }
        // If no winner is found, return ' '
        return ' ';
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TicTacToe game = new TicTacToe();
        char currentPlayer = 'X';

        // Main game loop
        while (!game.isGameOver()) {
            // Print the current state of the board
            game.printBoard();
            // Prompt the current player for their move
            System.out.println("Player " + currentPlayer + "'s turn.");
            System.out.print("Enter row (0-2): ");
            int row = scanner.nextInt();
            System.out.print("Enter column (0-2): ");
            int col = scanner.nextInt();
            // Check if the move is valid
            if (game.isValidMove(row, col)) {
                // Make the move
                game.makeMove(row, col, currentPlayer);
                // Switch to the other player
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            } else {
                System.out.println("Invalid move. Please try again.");
            }
        }

        // Game is over, print the final state of the board
        game.printBoard();
        // Determine the winner
        char winner = game.getWinner();
        if (winner != ' ') {
            System.out.println("Player " + winner + " wins!");
        } else {
            System.out.println("It's a tie!");
        }
        scanner.close();
    }
}
console.log(Tic-tac-toe)